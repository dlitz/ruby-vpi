/*
	Copyright 2006 Suraj Kurapati

	This file is part of Ruby-VPI.

	Ruby-VPI is free software; you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation; either version 2 of the License, or
	(at your option) any later version.

	Ruby-VPI is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#ifndef HANDLE_CIN
#define HANDLE_CIN

	#include <ruby.h>
	#include "common.h"
	#include "Handle.hin"


	#define freeHandle free

	static inline int isHandle(VALUE rHandle) {
		return TYPE(rHandle) == T_DATA && RDATA(rHandle)->dfree == (RUBY_DATA_FUNC)freeHandle;
	}

	static vpiHandle Handle_unwrap(VALUE rHandle) {
		// raise if wrong type
		if(!isHandle(rHandle)) {
			rb_raise(rb_eTypeError, "wrong argument type");
		}


		// unwrap the wrapper
		tHandle *handle;
		Data_Get_Struct(rHandle, tHandle, handle);


		return handle->obj;
	}

	void Init_Handle() {
		cHandle = rb_define_class_under(mVPI, "Handle", rb_cObject);
		rb_define_alloc_func(cHandle, Handle_alloc);
		rb_define_method(cHandle, "initialize", Handle_init, 0);
	}

	static VALUE Handle_alloc(VALUE rKlass) {
		tHandle* handle = ALLOC(tHandle);
		VALUE rHandle = Data_Wrap_Struct(rKlass, NULL, freeHandle, handle);

		return rHandle;
	}

	static VALUE Handle_init(VALUE rSelf) {
		tHandle* handle;
		Data_Get_Struct(rSelf, tHandle, handle);

		return rSelf;
	}

#endif
