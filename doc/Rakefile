=begin
  Copyright 2006 Suraj N. Kurapati

  This file is part of Ruby-VPI.

  Ruby-VPI is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  Ruby-VPI is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Ruby-VPI; if not, write to the Free Software Foundation,
  Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
=end

require 'rubygems'


## text parsing

Heading = Struct.new(:depth, :anchor, :title)

# Returns a table of contents for the given text and a modified version of the given text that has sufficient hyperlink anchors (so that the TOC can link to parts of the text).
def build_table_of_contents aText
  # determine structure of content and insert anchors where necessary
    headings = []

    text = aText.gsub /^(\s*h(\d))(\.|\(.*?\)\.)(.*)$/ do
      target = $~.dup

      has_anchor = target[3] =~ /#([^#]+)\)/
      anchor = $1 || "anchor#{headings.length}"

      headings << Heading.new( target[2].to_i, anchor, target[4].strip )

      if has_anchor
        target.to_s
      else
        "#{target[1]}(##{anchor})#{target[3]}#{target[4]}"
      end
    end

  # generate table of contents
    toc = headings.map do |h|
      %{#{'*' * h.depth} "#{h.title}":##{h.anchor}}
    end.join("\n")

  [toc, text, headings]
end


## text formatting

require 'cgi'
require 'coderay'
require 'redcloth'

class String
  def redcloth
    RedCloth.new(self).to_html
  end

  # Adds syntax coloring to <code>...</code> elements in the given text. If the <code> tag has an attribute lang="...", then that is considered the programming language for which appropriate syntax coloring should be applied. Otherwise, the programming language is assumed to be ruby.
  def coderay
    gsub %r{<(code)(.*?)>(.*?)</\1>}m do
      code = CGI.unescapeHTML($3)
      atts = $2
      lang =
        if $2 =~ /lang=('|")(.*?)\1/i
          $2
        else
          :ruby
        end


      type =
        if code =~ /\n/
          :pre
        else
          :code
        end

      html = CodeRay.scan(code, lang).html(:css => :style)

      %{<#{type} class="code"#{atts}>#{html}</#{type}>}
    end
  end

  def to_html
    redcloth.coderay
  end
end


## ERB template manipulation

@erbBuffer = ""  # this is used by in ERB.new below

# Returns an array containing (1) the contents of the ERB buffer thus far and (2) the text that is to be added to the ERB buffer.
def erb_block_contents
  # backup the buffer because yield is gonna append to it
    buf = @erbBuffer
    @erbBuffer = ""

  text = yield

  # restore the backup
    @erbBuffer = buf

  [buf, text]
end

# these methods create admonitions
[:tip, :note, :important, :caution, :warning].each do |adm|
  # using a string because define_method does not accept a block until Ruby 1.9
  instance_eval %{
    def #{adm} aTitle = '', &aBlock
      buf, text = erb_block_contents(&aBlock)

      buf << <<EOS
<div class="admonition">
<div class="#{adm}">

!<images/#{adm}.png(#{adm})!

p(title). #{adm.to_s.capitalize}: \#{aTitle}

\#{text}

</div>
</div>
EOS
    end
  }
end


require 'rake/clean'
require 'erb'

TEMPLATE_FILE = File.join(File.dirname(__FILE__), 'common.tpl')

FileList['*.erb'].each do |src|
  prefix = File.basename(src, '.erb')
  helper = prefix + '.rb'
  dst = prefix + '.html'

  file dst => [src, TEMPLATE_FILE] do
    @table_of_contents = true
    @title = nil

    # evaluate the content
      template = ERB.new(File.read(src), nil, nil, :@erbBuffer)

      if File.exist? helper
        eval File.read(helper)
      end

      content = template.result(binding)

    # evaluate the common template
      toc, text, structure = build_table_of_contents(content)

      template = ERB.new(File.read(TEMPLATE_FILE))
      content = template.result(binding)

    File.open(dst, 'w') do |f|
      f << content
    end

    puts dst
  end

  task :default => dst
end

CLEAN.include '*.html'
