=begin
  Copyright 2006 Suraj N. Kurapati

  This file is part of Ruby-VPI.

  Ruby-VPI is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  Ruby-VPI is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with Ruby-VPI; if not, write to the Free Software Foundation,
  Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
=end


## text parsing

Heading = Struct.new(:depth, :anchor, :title)

# Returns a table of contents for the given text and a modified version of the given text that has sufficient hyperlink anchors (so that the TOC can link to parts of the text).
def build_table_of_contents aText
  # determine structure of content and insert anchors where necessary
    headings = []

    text = aText.gsub /^(\s*h(\d))(\.|\(.*?\)\.)(.*)$/ do
      target = $~.dup

      has_anchor = target[3] =~ /#([^#]+)\)/
      anchor = $1 || "anchor#{headings.length}"

      headings << Heading.new( target[2].to_i, anchor, target[4].strip )

      if has_anchor
        target.to_s
      else
        "#{target[1]}(##{anchor})#{target[3]}#{target[4]}"
      end
    end

  # generate table of contents
    toc = headings.map do |h|
      %{#{'*' * h.depth} "#{h.title}":##{h.anchor}}
    end.join("\n")

  [toc, text, headings]
end


## text formatting

require 'cgi'
require 'rubygems'
require 'coderay'
require 'redcloth'

class String
  def redcloth
    RedCloth.new(self).to_html
  end

  # Adds syntax coloring to <code>...</code> elements in the given text. If the <code> tag has an attribute lang="...", then that is considered the programming language for which appropriate syntax coloring should be applied. Otherwise, the programming language is assumed to be ruby.
  def coderay
    gsub %r{<(code)(.*?)>(.*?)</\1>}m do
      code = CGI.unescapeHTML($3)
      atts = $2
      lang =
        if $2 =~ /lang=('|")(.*?)\1/i
          $2
        else
          :ruby
        end


      type =
        if code =~ /\n/
          :pre
        else
          :code
        end

      html = CodeRay.scan(code, lang).html(:css => :style)

      %{<#{type} class="code"#{atts}>#{html}</#{type}>}
    end
  end

  def to_html
    redcloth.coderay
  end
end


## ERB manipulation

require 'erb_proxy'
require 'enumerator'

# ERB proxy used to evaluate all documentation ERB templates.
class DocProxy < ErbProxy
  Block = Struct.new :anchor, :title, :type
  Reference = Struct.new :target, :position

  attr_reader :blocks

  def initialize *aArgs
    super
    @blocks = Hash.new {|h,k| h[k] = []}
    @references = []

    # admonitions
      [:tip, :note, :important, :caution, :warning].each do |type|
        add_block_handler :admonition, type do |index, title, text|
          join_redcloth_elements [
            %{!<images/#{type}.png(#{type})!},
            %{p(title). #{type.to_s.capitalize}: #{title}},
            text,
          ]
        end
      end

    # formal blocks; see http://www.sagehill.net/docbookxsl/FormalTitles.html
      [:figure, :table, :example, :equation, :procedure].each do |type|
        add_block_handler :formal, type do |index, title, text|
          join_redcloth_elements [
            %{p(title). #{type.to_s.capitalize} #{index}. #{title}},
            text,
          ]
        end
      end

    # references
      add_handler :xref do |aBuf, aText, aTarget|
        @references << Reference.new(unanchor(aTarget), aBuf.length)
        nil
      end

    # footnotes
  end

  alias orig_result result

  def result *aArgs
    orig_result *aArgs

    # expand cross references (xref) into links to their targets
      unless @references.empty?
        # resolve targets of xrefs
          blocks = @blocks.values.flatten

          targets = @references.map do |ref|
            blocks.find {|b| b.anchor == ref.target}
          end

        # split the buffer into chunks (between every two chunks exists an xref)
          cutPoints = @references.map {|ref| ref.position}
          cutPoints.unshift 0
          cutPoints.push @buffer.length

          chunks = []
          cutPoints.each_cons(2) do |a, b|
            chunks << @buffer[a...b] # range is exclusive to avoid overlap between chunks
          end

        # reassemble the broken buffer by pasting in the expanded xrefs
          newBuffer = ""

          chunks.each do |c|
            newBuffer << c

            if t = targets.shift
              newBuffer << %{"the #{t.type} named &ldquo;#{t.title}&rdquo;":##{t.anchor}}
            end
          end

          @buffer = newBuffer
      end

    @buffer
  end

  private

  # The category eases the task of customizing each type's appearance via CSS.
  # This method must return the result of the handling of the input text.
  def add_block_handler aCategory, aType
    add_handler aType do |buf, text, title, anchor|
      index = @blocks[aType].length + 1

      unless anchor
        anchor = "#{aType}#{index}"
      end
      anchor = unanchor(anchor)

      @blocks[aType] << Block.new(anchor, title, aType)


      elts = [
        %{<div class="#{aCategory}">},
          %{<div class="#{aType}" id="#{anchor}">},
            yield(index, title, text),
          '</div>',
        '</div>',
      ]

      text = join_redcloth_elements(elts)
      buf << text
      text
    end
  end

  def join_redcloth_elements *args
    args.join("\n\n\n")
  end

  def unanchor aAnchor
    aAnchor.sub /^#+/, ''
  end
end


## the real Rake tasks

require 'rake/clean'

COMMON_HTML_TEMPLATE = File.join(File.dirname(__FILE__), 'common.tpl')

FileList['*.erb'].each do |src|
  prefix = File.basename(src, '.erb')
  helper = prefix + '.rb'
  dst = prefix + '.html'

  file dst => [src, COMMON_HTML_TEMPLATE] do
    @table_of_contents = true
    @title = nil

    # evaluate the documentation ERB template
      proxy = DocProxy.new(File.read(src))

      content = proxy.instance_eval do
        if File.exist? helper
          instance_eval File.read(helper)
        end

        result(binding)
      end

    # evaluate the common HTML template
      toc, text, structure = build_table_of_contents(content)

      template = ERB.new(File.read(COMMON_HTML_TEMPLATE))
      content = template.result(binding)

    File.open(dst, 'w') do |f|
      f << content
    end

    puts dst
  end

  task :default => dst
end

CLOBBER.include '*.html'
