-
  Version: 11.1.0

  Date: 2006-11-08

  Summary: |
    This release fixes a bug in generated benches, improves the "the @Vpi::Handle@ class":./ref/ruby/classes/Vpi/Handle.html, and improves performance by roughly 20%.

  Acknowledgment: |
    Thanks to Matt Fischler for finding the bug in generated benches (see below).

  Notice: |
    * A bug in generated Verilog and Ruby benches, which caused this error <pre>ruby: no such file to load -- ruby-vpi (LoadError)</pre> has been fixed.
    ** Please regenerate your tests to apply this bug fix to your tests.

  Detail: |
    * The class @SWIG::TYPE_p_unsigned_int@ has been aliased as @Vpi::Handle@ for easier access.

    * @Vpi::Handle#to_s@ and @Vpi::Handle#inspect@ now produce more informative output. For example, what used to appear as <pre>#<SWIG::TYPE_p_unsigned_int:0x2aaab6574fa0></pre> now appears as <pre>#<Vpi::Handle vpiModule fullName=counter_rspec_bench, size=-1, file=counter_rspec_bench.v, lineNo=2></pre> in this release.
    ** You can also provide a list of VPI property/type names or integer constants to those methods to see additional information in the output.

    * @Vpi::Handle@ now implements all methods from @Enumerable@, such as @map@, @each@, @select@, and so on. However, unlike their counterparts in @Enumerable@, these methods also accept a list of VPI property/type names or integer constants. Thus, you are now able to write @handle.select(:reg, :net) {|h| h.size > 5}@ to obtain a list of child handles to registers and nets whose capacity is greater than 5 bits.

    * The @Vpi::Handle#[]@, @Vpi::Handle#get_value@, and @Vpi::Handle#put_value@ methods now accept names of VPI types/properties as well as their integer constants. Thus, you are now able to write @handle[:reg, :net]@ to obtain a list of handles to all child registers and nets.

    * @Vpi::Handle#method_missing@ has been refactored to cache queries. There is now, approximately, 20% improvement in performance.

    * @Vpi::Handle#method_missing@ has been fixed to accept operations with multiple underscores. For example, before this release, you could not write @handle.find_all_reg {|r| r.name =~ /foo/}@ because the "find_all_reg" method would be interpreted as the operation "find" and the VPI property "all_reg".

    * @Vpi::Handle#method_missing@ no longer requires that the first letter of a method be lower case. For example, now you can now write @handle.IntVal@ in addition to @handle.intVal@.

    * The @IntegerGenerator@ class, in the pipelined ALU example, has been fixed so that multiple instances do not interfere with the generation of each other's prime integers.

    * Due to a bug in the @Rakefile@, the reference documentation was not included in the previous few releases. This has been fixed.


-
  Version: 11.0.0

  Date: 2006-11-05

  Summary: |
    This release shortens generated Ruby benches and uses the less confusing notation for defining "singleton methods":http://wiki.rubygarden.org/Ruby/page/show/SingletonTutorial in generated designs and prototypes.

  Notice: |
    * The arguments for the "@RubyVPI.init_bench@ method":ref/ruby/classes/RubyVpi.html have changed.

    * *generate_test.rb* no longer emits undocumented status indicators: _name_ and _format_.

    * The source code is no longer distributed as a *zip* package, because it seems to be quite underutilized in comparison to the *tgz* and *gem* packages.

  Detail: |
    * Generated Ruby benches have been shortened to just _one_ line of code!

    * The less confusing notation of <pre>def some_object.a_singleton_method
      do_stuff
    end</pre> is now used instead of the <pre>class << some_object
      def a_singleton_method
        do_stuff
      end
    end</pre> notation.
    ** The tutorial and examples have been updated accordingly.

    * The pipelined ALU example now has an updated @IntegerGenerator@ class.


-
  Version: 10.0.0

  Date: 2006-11-05

  Summary: |
    This release adds the ability to access a handle's children and reduces the amount of code produced by the automated test generator.

  Acknowledgment: |
    Thanks to Matt Fischler for finding the problem of misdirected compilation errors in Verilog benches.

  Notice: |
    * The way in which Ruby-VPI and generated tests interact has changed: the design is now a VPI handle object and the @design.rb@ and @proto.rb@ files define "singleton methods":http://wiki.rubygarden.org/Ruby/page/show/SingletonTutorial for that object.
    ** I suggest that you regenerate your existing tests (just run *generate_test.rb* again) whilst employing the service of a text merging tool (see the user manual).

    * You can now access a handle's children by simply calling methods on it. In the event that a child handle has the same name as a VPI property, the child is given priority. However, you can always access VPI properties explicitly via the @get_value@ and @put_value@ methods.

    * *generate_test.rb* no longer accepts the @-s@ and @-u@ options. Use their longer counterparts @--rspec@ and @--xunit@ instead.


  Detail: |
    h3. Automated test generator

    * Generated Verilog benches no longer divert compilation errors from Verilog design files. That is, if the Verilog simulator finds compilation errors in a Verilog design file, it will report that the Verilog design file is at fault (instead of reporting that the generated Verilog bench is at fault).

    * The user is now notified when a backup of an existing file is made.

    * Generated tests have been greatly simplified to reduce the amount of work for the user.
    ** The design is now just a handle to the module in the Verilog bench.
    ** @include Vpi@ and @@design@ are no longer generated.
    ** The tutorial and examples have been updated accordingly.

    h3. User manual

    * Revised the stylesheet to make disjoint sections readily distinguishable from each other, through generous spacing and minor coloring.

    * Added tips about @ruby-vpi/runner_proxy@, @rake -T@, and using *kdiff3* with *generate_test.rb*.

    * Moved installation information into a new "setup" chapter.


-
  Version: 9.0.0

  Date: 2006-10-28

  Summary: |
    This release improves the automated test generator and adds new content to the user manual.

  Acknowledgment: |
    Thanks to Matt Fischler for helping test and debug the installation of Ruby-VPI on Windows.

  Notice: |
    * The command-line options for @generate_test.rb@ have changed. Run the command @generate_test.rb --help@ for details.

  Detail: |
    * Test runners now attempt to resolve paths in @SIMULATOR_SOURCES@ by searching for them within the directories specified in @SIMULATOR_INCLUDES@.

    * Synopsys VCS is now used in a better way (via the @-load@ option).
    ** The old PLI table file (@synopsys_vcs.tab@) has been removed.
    ** The C extension has been revised accordingly.

    ** The C extension now compiles without errors in Cygwin.

    * The automated test generator now:
    ** Only creates output files when necessary.
    ** Updates existing output files using "text merging tools":./doc/usage.recommendations.html if possible. (Refer to @MERGER@ in the help information of @generate_test.rb@.)
    ** Emits progress information similar to Ruby on Rails.

    * The user manual now:
    ** Includes instructions for installing on Windows (via Cygwin).
    ** Has a recommended software section, with links to text merging tools.
    ** Uses the term "xUnit":http://en.wikipedia.org/wiki/XUnit instead of "unit test".
    ** Correctly spells "rSpec".


-
  Version: 8.2.0

  Date: 2006-10-24

  Summary: |
    This release simplifies configuration of generated tests.

  Acknowledgment: |
    Thanks to "students in CMPE-126":http://www.soe.ucsc.edu/classes/cmpe126/Fall06/ for their constructive criticism.

  Notice: |
    * Generated runners now have a @SIMULATOR_INCLUDES@ array, whose entries specify places where Verilog source files, needed by the Verilog design, reside.

  Detail: |
    * Generated Verilog benches now inherit all @`include@ and @`define@ directives from the Verilog design in a simpler manner.
    * A generated test no longer requires its Verilog design to reside in the same directory.
    * The sample tests have been updated accordingly.


-
  Version: 8.1.0

  Date: 2006-10-21

  Summary: |
    This release adds an integer library and renames the vpi_util library.

  Notice: |
    * The *vpi_util* library has been renamed to *vpi*. This change should not affect your code unless you explicitly imported this library via @require 'ruby-vpi/vpi_util'@. In which case, you should update your code to use @require 'ruby-vpi/vpi'@ accordingly.

  Detail: |
    * An integer library has been added to simplify common tasks related to hardware and the binary number system. You can import this library for use via @require 'ruby-vpi/integer'@.


-
  Version: 8.0.0

  Date: 2006-10-13

  Summary: |
    This release renames some identifiers for consistency, updates the documentation, and improves integration with RubyGems.

  Notice: |
    * The @RubyVPI@ module has been renamed to @RubyVpi@.

    * The @PROTO@ environment variable has been renamed to @PROTOTYPE@.
    ** In addition to using @unset@, you can now disable simulation of the prototype by assigning an empty value to this variable.

  Detail: |
    * We now use "Darcs":http://darcs.net for revision control, instead of Subversion. The source repository can now be accessed at "http://ruby-vpi.rubyforge.org/src/ruby-vpi":http://ruby-vpi.rubyforge.org/src/ruby-vpi.

    * The source code is now distributed in tar.gz and zip form, in addition to gem.

    * Some identifiers have been renamed for better consistency.

    * The user manual now resides directly within the @doc/@ directory.
    ** The integration of documentation in @gem_server@ has been improved.

    * The glossary and tutorial in the user manual have been revised.


-
  Version: 7.3.0

  Date: 2006-09-30

  Summary: |
    This release fixes a bug in generated Verilog benches, includes parsed constants in generated tests, and adds new methods to handles.

  Notice: |
    * Handles now have two new methods:
    ** @handle.x?@ checks if the logic value is "don't care"
    ** @handle.z?@ checks if the logic value is high impedance

  Detail: |
    * Module instantiation code in generated Verilog benches has been fixed. Whitespace between the module type and instance variable was missing.

    * The test generator tool now provides parsed Verilog constants and include-directives in generated Verilog benches; and parsed Verilog constants in generated Ruby designs.
    ** The pipelined ALU example has been revised accordingly.

    * A library for parsing Verilog source code has been added as @lib/ruby-vpi/verilog_parser.rb@.


-
  Version: 7.2.0

  Date: 2006-09-15

  Summary: |
    This release adds initial[1] support for code coverage analysis via the "rcov library":http://eigenclass.org/hiki.rb?rcov.

  Acknowledgment: |
    Thanks to Mauricio Fernandez for helping me use rcov without its runner.

  Detail: |
    * Added initial[1] support for code coverage analysis, which can be enabled by setting the @COVERAGE@ environment variable to a non-empty value before running a test.
    ** For example, you can run a test with the GPL Cver simulator while enabling the generation of code coverage reports as follows: @export COVERAGE=1; rake cver@

    * Coverage reports are generated in text and HTML formats.

    fn1. Full capabilites of the rcov library, such as its various analysis modes, are not yet utilized.


-
  Version: 7.1.0

  Date: 2006-08-29

  Summary: |
    This release simplifies running of multiple tests, restores compatibility with Synopsys VCS, and better integrates with RubyGems.

  Detail: |
    * Added @lib/ruby-vpi/runner_proxy@ library which, when embedded into a Rakefile, runs all generated tests in the working directory with any specified arguments. For example, have a look at the @samp/counter/Rakefile@ file.

    * Fixed a bug that prevented one from running tests with Synopsys VCS.

    * Ruby-VPI documentation is now available through RubyGems' "@gem_server@ web interface":http://docs.rubygems.org/read/chapter/2#page10.

    * The user manual now discusses how to determine the location of a Ruby-VPI installation.

    * The @tpl/@ directory has been removed.


-
  Version: 7.0.0

  Date: 2006-08-29

  Summary: |
    This release distributes Ruby-VPI as a gem, improves portability of generated tests, and fixes a bug.

  Notice: |
    * @put_value()@ now accomodates register value overflows when verifying the value it has written.

    * The test generator's templates and the examples have been updated as follows:
    ** Test runners no longer have to specify the path to Ruby-VPI installation directory. Instead, they simply @require 'ruby-vpi/runner'@. Thus, you can run your tests on any machine with Ruby-VPI without having to know where it is installed.
    ** Ruby benches now invoke @RubyVPI.init_bench@ instead of @require 'bench'; setup_bench@ to become initialized.

    * All Ruby libraries in the @lib/@ directory have been moved into @lib/ruby-vpi/@ to prevent load-path clashes with other gems. You should access these libraries by prefixing their path with "ruby-vpi". For example, @require 'vpi_util'@ should now be written as @require 'ruby-vpi/vpi_util'@.

    * The @src/@ directory has been renamed to @ext/@ to follow RubyGems convention.

  Detail: |
    * Ruby-VPI is now distributed only as a "source gem":http://www.rubygems.org. You can decompress the gem without installing it onto your system by running the command @gem install -i output_directory ruby-vpi-7.0.0.gem@. In addition, you can still obtain the source code directly from the Subversion repository.

    * The tools in @bin/@ become available in your system's @bin/@ directory when the gem is installed.
    ** Usage and help information has been added to the @header_to_ruby.rb@ tool.

    * Incorrect spelling of GPL Cver (v should be uncapitalized) has been fixed.

    * Incorrect link to GPL Cver website has been fixed.

    * The user manual has been updated according to all of the above changes.


-
  Version: 6.3.0

  Date: 2006-08-27

  Summary: |
    This release adds support for the GPL Cver simulator, provides both binary and source packages, and explicitly defines the version numbering system.

  Notice: |
    * Ruby-VPI now only needs to be built once.
    ** You can run tests with different Verilog simulators without having to re-compile Ruby-VPI.

  Detail: |
    * The GPL Cver simulator is now supported.

    * Release packages are now available in both source and binary form.

    * The RSpec based specifications for the counter example now use the @should_equal@ instead of the @should_be@ assertion, because the latter ensures strict equivalence. For instance, it will fail when a Fixnum is compared to a Bignum.

    * We now follow the RubyGems project's "rational versioning policy":http://www.rubygems.org/read/chapter/7. The version numbers of previous releases have been revised accordingly:
    |_. Release date |_. Original version number |_. New version number |
    | 1999-10-31 | 0.0   | 0.0.0 |
    | 2006-02-26 | 0.1   | 1.0.0 |
    | 2006-04-17 | 0.2   | 2.0.0 |
    | 2006-04-23 | 0.3   | 3.0.0 |
    | 2006-04-28 | 0.4   | 3.1.0 |
    | 2006-05-13 | 0.5   | 3.2.0 |
    | 2006-05-25 | 0.6   | 4.0.0 |
    | 2006-07-22 | 0.7   | 5.0.0 |
    | 2006-07-29 | 0.8   | 5.1.0 |
    | 2006-08-04 | 0.8.1 | 5.1.1 |
    | 2006-08-07 | 0.9   | 6.0.0 |
    | 2006-08-09 | 0.9.1 | 6.1.0 |
    | 2006-08-26 | 0.9.2 | 6.2.0 |

-
  Version: 6.2.0

  Date: 2006-08-26

  Summary: |
    This release beautifies generated tests, adds checks to find signal width bugs, and includes a new tool.

  Notice: |
    * @put_value()@ now returns the value it puts. Therefore, it is easier to chain together a series of assignments: @foo.intVal = bar.intVal = baz.intVal = 10@

    * @put_value()@ now verifies that the value it puts was written correctly. This helps to find bugs regarding invalid assumptions about the number of bits supported by a signal.

  Detail: |
    * The test generator now uses ERB templates which ensures nice indentation of generated output.

    * The test generator now decouples Ruby-VPI paths from Verilog benches via the RUBYLIB environment variable.

    * A tool which converts Verilog headers into Ruby has been added.

    * The source code is now indented with two spaces instead of one tab character.


-
  Version: 6.1.0

  Date: 2006-08-09

  Summary: |
    This release simplifies generated tests and fixes a bug.

  Detail: |
    * The test generator now produces simpler Ruby benches and specifications.
    ** A template used by generated specifications has been added.
    ** The counter example and tutorial have also been simplified accordingly.

    * Boolean VPI property values are now correctly converted into Ruby truth values.


-
  Version: 6.0.0

  Date: 2006-08-07

  Summary: |
    This release adds support and documentation for rapid prototyping of Verilog designs in Ruby.

  Notice: |
    * The directory structure has been reorganized as follows:
    ** @ext@ &rarr; @src@
    ** @tools@ &rarr; @bin@
    ** @examples@ &rarr; @samp@

    * All template files have been moved into the @tpl@ directory.

  Detail: |
    * Support for prototyping designs in Ruby, before they are implemented in Verilog, has been added.
    ** The _same_ specification can be used to verify both prototype _and_ design! :-)
    ** The tutorial in the user manual has been updated to discuss prototyping.
    *** Prototypes have been added to the counter example.

    * The user manual has been revised for consistency.


-
  Version: 5.1.1

  Date: 2006-08-04

  Summary: |
    This release fixes unreadable syntax coloring in the user manual.

  Acknowledgment: |
    * Thanks to Todd Nagengast and Matt Fischler for notifying me about unreadable text in the user manual.

  Detail: |
    * Source code comments in the user manual are now readable.

    * The @README@ and @HISTORY@ files have been converted to "textile":http://www.textism.com/tools/textile/ format.


-
  Version: 5.1.0

  Date: 2006-07-29

  Summary: |
    This release adds a tutorial to the user manual, and improves the tools and examples.

  Acknowledgment: |
    * Thanks to Phil Tomson for correcting the URL of the RHDL website, in the user manual.

  Detail: |
    h3. User manual

    * A tutorial, based on the counter example, has been added to the user manual.

    * The user manual's appearance has been dramatically improved with syntax coloring for source code, and "graphics for admonitions and navigation":http://tango.freedesktop.org.

    h3. Examples

    * A specification, expressed in unit test format, has been added to the counter example.

    * The @--name@ and @-n@ options, which lets you specify an identifier for a generated test, have been added to the @generate_test.rb@ tool.

    * Running @rake clobber@ in an example directory no longer destroys documentation in the Ruby-VPI directory.

    * The examples' Rakefiles now invoke all tests present in the directory via the @launcher_template.rake@ template.

    * The Rake template for test runners (generated by @tools/generate_test.rb@) has moved from @examples/template.rake@ to @examples/runner_template.rake@.

    h3. VPI utility layer

    * The value of a handle's boolean VPI property is treated as @false@ if it is zero, because zero is @false@ in the C language.


-
  Version: 5.0.0

  Date: 2006-07-22

  Summary: |
    This release enhances the VPI utility layer and adds new content to the user manual.

  Acknowledgment: |
    * Thanks to Jan Decaluwe for correcting the description of MyHDL in the user manual.

  Notice: |
    * SWIG is no longer required for users because its output is included in the release package.

    * The @handle.value@ and @handle.value=@ methods have been removed.

  Detail: |
    * The VPI utility layer provides access to VPI properties of handles in a "simpler, more powerful way":http://ruby-vpi.rubyforge.org/doc/background.organization.html#organization.vpi.

    ** All VPI properties, except delay values, are now accessible from a handle.

    * The user manual has been revised and new content in the organization and usage sections has been added.

    * This release was tested and developed using:
    ** Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
    ** Ruby 1.8.4 and Mentor Modelsim 6.1d on x86_64 GNU/Linux


-
  Version: 4.0.0

  Date: 2006-05-25

  Summary: |
    This release adds a comprehensive user manual, upgrades from make to "Rake":http://rake.rubyforge.org, and improves the test generation tool.

  Acknowledgment: |
    * Thanks to Jose Renau for solving the problem of strange delays that occurred whenever a design was reset.

  Notice: |
    * Rake has replaced the role of *make*. All makefiles have been converted accordingly.

    * The test generation tool now generates multiple files (runner, bench, design, spec) and makes backups of existing files. See its help information for details.

  Detail: |
    * A comprehensive user manual, written in DocBook-XML, has been added.

    * Support for RSpec 0.5.4 has been added.
    ** The counter example now makes use of RSpec.

    * This release was tested and developed using:
    ** Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
    ** Ruby 1.8.4 and Mentor Modelsim 6.1d on x86_64 GNU/Linux


-
  Version: 3.2.0

  Date: 2006-05-13

  Summary: |
    This release adds a tool which generates test benches, and adds support for "Behavior Driven Development":http://behaviour-driven.org via the "RSpec":http://rspec.rubyforge.org library.

  Acknowledgment: |
    * Thanks to Scott L Holmes for helping me "use the RSpec library without its runner":http://article.gmane.org/gmane.comp.lang.ruby.general/150087 program.

  Detail: |
    * A tool, which generates most of a Ruby-VPI test bench from a Verilog 2001 module declaration, has been added.

    * Ability to use RSpec in a test bench has been added.

    * Ability to specify arbitrary command-line arguments to Verilog simulators has been added in the examples' makefile template.

    * This release was tested and developed using:
    ** Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
    ** Ruby 1.8.4 and Mentor Modelsim 6.1d on x86_64 GNU/Linux


-
  Version: 3.1.0

  Date: 2006-04-28

  Summary: |
    This release adds simple ways of reading and writing values to VPI handles, adds documentation for the VPI utility layer, and fixes the pipelined ALU example.

  Notice: |
    * The *msim* Makefile target for Mentor Modelsim has been renamed back to *vsim*.

  Detail: |
    * Simple, consistent ways of reading and writing values to handles have been added to the VPI utility layer. These ways are described in the @SWIG::TYPE_p_unsigned_int@ class' documentation.

    * The makefiles now use the *rbconfig* library to determine the default compiler and linker flags for Ruby.

    * A race condition in the pipelined ALU example has been fixed. This example should now run successfully in all Verilog simulators.

    * The project wiki has been abandoned in favor of RDoc.

    * The project website is now generated by RDoc.

    * This release was tested and developed using:
    ** Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
    ** Ruby 1.8.4 and Mentor Modelsim 6.1d on x86_64 GNU/Linux


-
  Version: 3.0.0

  Date: 2006-04-23

  Summary: |
    This release adds support for the _entire_ "IEEE Std. 1364-2005":http://ieeexplore.ieee.org/xpl/standardstoc.jsp?isnumber=33945 VPI interface, and updates the examples into unit tests.

  Acknowledgment: |
    * Thanks to the "SWIG developers":http://www.swig.org/guilty.html for making this project _much_ easier! ;-)

  Notice: |
    * The *vsim* Makefile target for Mentor Modelsim has been renamed to *msim*.

  Detail: |
    * The Ruby interface to VPI is now generated by "SWIG":http://www.swig.org.
    ** The main @VPI@ module has been renamed to @Vpi@.
    ** The @VPI::Handle@ class has been removed.
    ** The @VPI::stop@, @VPI::finish@, and @VPI::reset@ methods have been removed.

    * The "_final ballot_ version":http://www.boydtechinc.com/ptf/archive/ptf_2005/0737.html of the @vpi_user.h@ header file is now packaged along with and used by Ruby-VPI.

    * The VPI module, its sub-classes, and its functionality have been replaced by the VPI utility layer (see @src/vpi_util.rb@).

    * The examples now make use of the *test/unit* unit testing framework.

    * The makefiles for the examples have been simplified through the use of a common template.

    * This release was tested and developed using:
    ** Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
    ** Ruby 1.8.4 and Mentor Modelsim 6.1d on x86_64 GNU/Linux


-
  Version: 2.0.0

  Date: 2006-04-17

  Summary: |
    This release fixes major bugs, adds support for Mentor Modelsim, and removes the @$ruby_task@ callback.

  Acknowledgment: |
    * Thanks to Nobu Nakada for explaining the "cross-thread violation on rb_gc()":http://article.gmane.org/gmane.comp.lang.ruby.general/146653 error.

  Notice: |
    * Removed @$ruby_task@ callback and ability to dynamically register system tasks from Ruby because inter-process communication is complicated at present.

  Detail: |
    * The *cross-thread violation on rb_gc()* error has been fixed.
    ** The *stack level too deep (SystemStackError)* error has been fixed.
    ** The *test/unit* library can be used in Ruby test bench.
    ** Mentor Modelsim Verilog simulator works with Ruby-VPI.

    * Added piplelined ALU example.

    * This release was tested and developed using:
    ** Ruby 1.8.4 and Icarus Verilog 0.8 on i686 GNU/Linux
    ** Ruby 1.8.4 and Modelsim 6.1d on x86_64 GNU/Linux
    ** Ruby 1.8.4 and Synopsys VCS-MX X-2005.06-SP1 on SPARC4 SunOS 5.10


-
  Version: 1.0.0

  Date: 2006-02-26

  Summary: |
    This release adds enough Verilog VPI functionality to make Ruby-VPI usable for simple test benches:
    * access Verilog objects through VPI handles
    * read and change VPI handle values
    * stop, finish, restart the simulation

  Acknowledgment: |
    * Thanks to Jose Renau for helping me debug how Synopsys VCS works with Verilog VPI. The problem was that VCS required calltf signatures to be @void (*)(void)@, whereas the Verilog standard defines a calltf signature as @PLI_INT32 (*)(PLI_BYTE8*)@.

    * Thanks to Ross Bamford, Eric Hodel, and Yukihiro Matsumoto for "helping me discover":http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/180662 why the @SystemStackError@ was happening.

  Detail: |
    * Implemented some Verilog VPI functionality:
    ** @VPI::handle_by_name(string, VPI::Handle)@ &rarr; @VPI::Handle@
    ** @VPI::handle_by_name(string)@ &rarr; @VPI::Handle@
    ** @VPI::Handle#put_value(integer)@
    ** @VPI::Handle#value = integer@
    ** @VPI::Handle#get_value@ &rarr; @integer@
    ** @VPI::Handle#value@ &rarr; @integer@
    ** @VPI::stop@
    ** @VPI::finish@
    ** @VPI::reset@

    * Implemented some additional functionality:
    ** @VPI::register_task(string, &proc)@

    * Added ability to pass arbitrary command-line arguments to the Ruby interpreter (using @$ruby_init@). Now you can invoke any Ruby script you want, instead of @pli_init.rb@.

    * Added ability to dynamically register system tasks from Ruby, using @VPI::register_task("task name")@, and call them from Verilog, using @$ruby_task("task name")@.

    * Added @VPI::Handle@ class which encapsulates a @vpiHandle@ VPI object.

    * This release was tested and developed using:
    ** Ruby 1.8.2 and Icarus Verilog 0.8 on i686 GNU/Linux
    ** Ruby 1.8.4, Synopsys VCS X-2005.06, and Mentor Modelsim 6.1b on i686 GNU/Linux


-
  Version: 0.0.0

  Date: 1999-10-31

  Summary: |
    This is Kazuhiro HIWADA's initial testing release of Ruby-VPI. See its "original announcement":http://www.ruby-talk.org/cgi-bin/scat.rb/ruby/ruby-list/18193 and "source code":http://easter.kuee.kyoto-u.ac.jp/~hiwada/ruby/memo/src/ruby-vpi-test.tgz.

  Detail: |
    * Added ability to relay control from Verilog test bench to Ruby (using @$ruby_callback@) and vice versa (using @PLI::relay_Verilog@).

    * Tested and developed using Ruby 1.4 and Verilog-XL from Cadence systems, on a SPARC machine running Solaris 2.6.
