h1. Pending tasks

* add support for reading & writing VPI delay values

* GHDL simulator supports VPI
** need way to invoke VPI tasks from VHDL, like @$ruby_init();@

* need to dump signal values when expectation fails in rSpec
** maybe a waveform dump will also help
** this will help in debugging the problem

* add instructions for using *ruby-debug* with a graphical debugging tool or IDE like RadRails


h1. Finished tasks

* add support for ESL prototyping (like SystemC)

* decouple code generation with $RUBYLIB and erb

* change should_be to should_equal in examples

* add support for GPL Cver in the test runner template

* build ruby-vpi once to generate all .so files
** test runner should not rebuild ruby-vpi every time

* distribute as a GEM, binary, and source
** use RUBYLIB to bypass rubygems site installation for local testing. otherwise have to build & install gem _every_ time!
** move stuff from lib/ into lib/ruby-vpi/

* integrate RCov for code-coverage statistics

* method_missing for Design class

* define handled methods in Vpi::method_missing for faster response
** this has been verified as bottleneck from profiling data

* make RCov correctly profile the code and report useful coverage metrics...


h1. Obsolete tasks

* smarter test generation, which adjusts to user modifications in previously generated output -- just use a smart merging tool like *kdiff3*

* interactive console IRB wrapper for spec (just like Breakpoints in Rails)
** use the *ruby-debug* library with "*debugger* command for breakpoints":http://www.datanoise.com/articles/category/ruby-debug instead!


h1. Notes

* When within Rake, rubygems is automatically available for use. no need to require() it again

