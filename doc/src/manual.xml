<?xml version="1.0" encoding="utf-8"?>
<!--
	Copyright 2006 Suraj N. Kurapati.

	Permission is granted to copy, distribute and/or modify this
	document under the terms of the GNU Free Documentation License,
	Version 1.1 or any later version published by the Free Software
	Foundation; with no Invariant Sections, no Front-Cover Texts and
	no Back-Cover Texts.  A copy of the license is included in the
	the file named "LICENSE".
-->

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN" "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
	<!-- imports -->
	<!ENTITY % sharedDTD SYSTEM "shared.dtd"> %sharedDTD;
	<!ENTITY license SYSTEM "license.xml">


	<!-- content -->
	<!ENTITY background.step3 "<para>When the Ruby interpreter invokes the <code>Vpi::relay_verilog</code> method, it is paused and the &v; simulator is given control.</para>">

	<!ENTITY fixed-0.2 "<note>
		<title>Fixed in &rv; 0.2</title>
		<para>This problem was fixed in release 0.2 of &rv;. If it still occurs, then <link linkend='introduction.resources'>please report it</link>.</para>
	</note>">

	<!ENTITY test-bench.gloss "<glossterm linkend='term..test-bench'>test bench</glossterm>">
	<!ENTITY test.gloss "<glossterm linkend='term..test'>test</glossterm>">
	<!ENTITY design.gloss "<glossterm linkend='term..design'>design</glossterm>">
	<!ENTITY specification.gloss "<glossterm linkend='term..specification'>specification</glossterm>">
	<!ENTITY bench.gloss "<glossterm linkend='term..bench'>bench</glossterm>">
	<!ENTITY BDD.gloss "<glossterm linkend='term..BDD'>BDD</glossterm>">
	<!ENTITY rspec.gloss "<glossterm linkend='term..rspec'>&rspec;</glossterm>">
	<!ENTITY rake.gloss "<glossterm linkend='term..rake'>&rake;</glossterm>">
	<!ENTITY handle.gloss "<glossterm linkend='term..handle'>handle</glossterm>">

	<!ENTITY rake "Rake">
	<!ENTITY rake.url "http://rake.rubyforge.org/">
	<!ENTITY rake-doc.url "http://docs.rubyrake.org/">

	<!ENTITY rspec "RSpec">
	<!ENTITY rspec.url "http://rspec.rubyforge.org">
	<!ENTITY rspec..ulink "<ulink url='&rspec.url;'>&rspec;</ulink>">
	<!ENTITY rspec-tutorial.url "http://rspec.rubyforge.org/tutorials/index.html">
	<!ENTITY rspec-tutorial..ulink "<ulink url='&rspec-tutorial.url;'>&rspec; tutorial</ulink>">
]>
<book lang="en">
	<bookinfo>
		<title>&rv; user manual</title>

		&snk..copyright;

		<abstract>
			<para>This manual explains how to use &rv;. You can find the newest version of this manual at the <ulink url="&rv.url;">&rv; website</ulink>.</para>
		</abstract>

		<legalnotice>
			<para>Permission is granted to copy, distribute and/or modify this document under the terms of the &gnu; Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled "&gnu; Free Documentation License".</para>
		</legalnotice>
	</bookinfo>

	<chapter id="introduction">
		<title>Introduction</title>
		<para>&rv; is a &ruby..ulink; interface to <ulink url="http://en.wikipedia.org/wiki/Verilog">&vpi;</ulink>. It lets you create complex &v; &test-bench.gloss;es easily and wholly in Ruby.</para>

		<section id="introduction.license">
			<title>License</title>
			<para>&rv; is <ulink url="http://en.wikipedia.org/wiki/Free_software">free software</ulink>; you can redistribute it and/or modify it under the terms of the <ulink url="http://www.gnu.org/copyleft/gpl.html">&gnu; General Public License</ulink> as published by the <ulink url="http://www.fsf.org">Free Software Foundation</ulink>; either version 2 of the License, or (at your option) any later version.</para>
		</section>

		<section id="introduction.manifest">
			<title>Manifest</title>

			<para>When you extract a &rv; release package, the following is what you would expect to find.</para>

			<variablelist>
				<varlistentry>
					<term><filename>doc</filename></term>
					<listitem>
						<para>This directory contains user documentation in various formats.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><filename>ref</filename></term>
					<listitem>
						<para>This directory contains reference <acronym>API</acronym> documentation in &html; format.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><filename>ext</filename></term>
					<listitem>
						<para>This directory contains source code for the <link linkend="background.organization">core of &rv;</link>, which is written in the C language.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><filename>lib</filename></term>
					<listitem>
						<para>This directory contains libraries for use by &specification.gloss;s written in the Ruby language.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><filename>tools</filename></term>
					<listitem>
						<para>This directory contains various tools. See <xref linkend="usage.tools"/> for more information.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><filename>examples</filename></term>
					<listitem>
						<para>This directory contains example &test.gloss;s. See <xref linkend="usage.examples"/> for more information.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="introduction.resources">
			<title>Resources</title>

			<variablelist>
				<varlistentry>
					<term><ulink url="&rv.url-project;">Project portal</ulink></term>
					<listitem>
						<para>Access project facilities, hosted generously by <ulink url="http://rubyforge.org">RubyForge</ulink>.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><ulink url="&rv.url-project;">Project tracker</ulink></term>
					<listitem>
						<para>Report problems, contribute patches, and more.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><ulink url="&rv.url-download;">File releases</ulink></term>
					<listitem>
						<para>Get the newest release package.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><ulink url="&rv.url-source;">Source repository</ulink></term>
					<listitem>
						<para>Get the newest source code.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><ulink url="&rv.url-forum;">Online forums</ulink></term>
					<listitem>
						<para>Ask for help, give feedback, or discuss.</para>
					</listitem>
				</varlistentry>
			</variablelist>
		</section>

		<section id="introduction.related-works">
			<title>Related works</title>

			<para>You may wish to consider the following projects, which are similar to &rv;.</para>

			<variablelist>
				<varlistentry>
					<term><ulink url="http://rhdl.rubyforge.org">RHDL</ulink></term>
					<listitem>
						<para>Hardware description and verification language based on Ruby.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><ulink url="http://myhdl.jandecaluwe.com">MyHDL</ulink></term>
					<listitem>
						<para>Hardware description and verification language based on Python, which features conversion to &v; and co-simulation.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><ulink url="http://jove.sourceforge.net">JOVE</ulink></term>
					<listitem>
						<para>Java interface to &vpi;.</para>
					</listitem>
				</varlistentry>
				<varlistentry>
					<term><ulink url="http://embedded.eecs.berkeley.edu/Alumni/pinhong/scriptEDA/">ScriptEDA</ulink></term>
					<listitem>
						<para>Perl, Python, and Tcl interface to &vpi;.</para>
					</listitem>
				</varlistentry>
			</variablelist>

			<section id="introduction.related-works.pli">
				<title>Ye olde PLI</title>
				<para>The following projects utilize the archaic <acronym>tf</acronym> and <abbrev>acc</abbrev> PLI interfaces, which have been officially deprecated in IEEE Std 1364-2005.</para>

				<variablelist>
					<varlistentry>
						<term><ulink url="http://www.nelsim.com">ScriptSim</ulink></term>
						<listitem>
							<para>Perl, Python, and Tcl/Tk interface to PLI.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><ulink url="http://www.veripool.com/verilog-pli.html">&v;::Pli</ulink></term>
						<listitem>
							<para>Perl interface to PLI.</para>
						</listitem>
					</varlistentry>
					<varlistentry>
						<term><ulink url="http://www.time-rover.com/jpli/">JPLI</ulink></term>
						<listitem>
							<para>Java interface to PLI.</para>
						</listitem>
					</varlistentry>
				</variablelist>
			</section>
		</section>
	</chapter>

	<chapter id="background">
		<title>Background</title>

		<para>&rv; is a &bench.gloss; which lets you &test.gloss; &v; modules using the Ruby language.</para>

		<section id="background.methodology">
			<title>Methodology</title>

			<para>&rv; presents an open-ended interface to &vpi;. Thus, you can use any methodology you wish when writing &test.gloss;s. However, &BDD.gloss; is emphasized in this project&mdash;through use of &rspec.gloss; in the <link linkend="usage.examples">examples</link>&mdash;because it greatly simplifies thinking about <emphasis>how</emphasis> to verify a design.</para>
		</section>

		<section id="background.terminology">
			<title>Terminology</title>

			<para>As a newcomer into the world of &v;, I often heard the term &test-bench.gloss;: <quote>I ran the test bench, but it didn't work!</quote> or <quote>Are you crazy?!! You <emphasis>still</emphasis> haven't written the test bench? o_O</quote>, for example. I flipped through my textbook and surfed the Internet for a definition of the term, but it was to no avail. Instead, both resources nonchalantly employed the term <emphasis>throughout</emphasis> their being, as if mocking my ignorance of what seems to be universal knowledge.</para>

			<para>Defeated, I turned to my inner faculties to determine the answer. <quote>Let's see, the term &test-bench.gloss; has the word <emphasis>test</emphasis>&mdash;so it has something to do with testing&mdash;and it has the word <emphasis>bench</emphasis>&mdash;so maybe it's referring to a table where the testing should occur</quote>. This reasoning grew increasingly familiar as my mind rummaged through towering stores of obsolescence and ultimately revealed dreaded memories of sleepless anguish: debugging electronics in the robotics laboratory.</para>

			<para><quote>Aha!</quote>, I exclaimed hesitantly, trying to forget the past. The term has its roots in the testing of electronic devices, where an engineer would sit at a bench in an electronics laboratory and verify that an electronic component satisfies some criteria. The bench would be furnished with tools of measurement and manipulation&mdash;such as oscilloscopes, voltmeters, soldering irons, and so on&mdash;which help the engineer to verify the electronic component or locate the sources of defects in the component.</para>

			<para>Alright, now I remember what a laboratory bench is, but how does that compare with the term &test-bench.gloss;? Surely they cannot have the same meaning, because it doesn't make sense to <emphasis>run</emphasis> a laboratory bench or to <emphasis>write</emphasis> one. Thus, to avoid propagating such confusion into this manual, I have attempted to clarify the terminology by <link linkend="glossary">simplifying and reintroducing it in a new light</link>.</para>
		</section>

		<section id="background.organization">
			<title>Organization</title>

			<figure id="fig..organization">
				<title>Overall organization of a test</title>
				<mediaobject>
					<imageobject>
						<imagedata fileref="figures/organization.png"/>
					</imageobject>
				</mediaobject>
			</figure>

			<para>As <xref linkend="fig..organization"/> shows, a &test.gloss; is composed of a &bench.gloss;, a &design.gloss;, and a &specification.gloss;. To extend the <link linkend="background.terminology">analogy of an electronics laboratory</link>, the first acts as the laboratory bench which provides measurement and manipulation tools. The second acts as the electronic component being verified by the engineer. And the third acts as the engineer who measures, manipulates, and verifies the electronic component.</para>

			<section id="organization.vpi">
				<title>Interface to &vpi;</title>

				<figure id="fig..organization.detail">
					<title>Detailed organization of a test</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/organization_detailed.png"/>
						</imageobject>
					</mediaobject>
				</figure>

				<para>In <xref linkend="fig..organization.detail"/>, &rv; acts as the &bench.gloss;, a &v; simulator encapsulates the &design.gloss;, and a Ruby interpreter encapsulates the &specification.gloss;. Notice that &rv; encapsulates all communication between the Ruby interpreter and &vpi;. This allows the &specification.gloss;, or any Ruby program in general, to access &vpi; using nothing more than the Ruby language! Thus, &rv; removes the burden of having to write C programs in order to access &vpi;.</para>

				<para>Furthermore, &rv; presents the <emphasis>entire</emphasis> IEEE Std 1364-2005 &vpi; interface to the Ruby interpreter, but with the following minor changes.

					<itemizedlist>
						<listitem>
							<para>The first letter in the name of every function, type, structure, and constant becomes capitalized.</para>

							<para>For example, the <literal>s_vpi_value</literal> structure in C becomes the <literal>S_vpi_value</literal> class in Ruby. Likewise, the <literal>vpiIntVal</literal> constant in C becomes the <literal>VpiIntVal</literal> constant in Ruby.</para>
						</listitem>

						<listitem>
							<para>The &vpi; functions <function>vpi_vprintf</function> and <function>vpi_mcd_vprintf</function> are not made accessible to Ruby. However, this isn't a big problem because you can use Ruby's <function>printf</function> method instead.</para>

							<para>The reason for this limitation is that some C compilers have trouble with pointers to the <literal>va_list</literal> type. For example, in the code shown below, the second line causes a <quote>type mismatch</quote> error.</para>

	<programlisting>
void foo(va_list ap) {
	va_list *p = &amp;ap;
}
</programlisting>
						</listitem>
					</itemizedlist>
				</para>

				<section id="organization.vpi.util">
					<title>&vpi; utility layer</title>
					<para>From a user's perspective, the &vpi; utility layer greatly enhances the ability to interact with &handle.gloss;s. One simply invokes a handle's methods, which are carefully named in the following manner, to access its &vpi; properties.</para>

					<table id="table..handle-property-accessor-naming-format" frame='all'>
						<title>Naming format for accessing a &handle.gloss;'s &vpi; properties</title>
						<tgroup cols='6'>
							<colspec colname='c1'/>
							<colspec colname='c2'/>
							<colspec colname='c3'/>
							<colspec colname='c4'/>
							<colspec colname='c5'/>
							<colspec colname='c6'/>
							<thead>
								<row>
									<entry>Operation</entry>
									<entry>_</entry>
									<entry>Property</entry>
									<entry>_</entry>
									<entry>Accessor</entry>
									<entry>Addendum</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry namest="c1" nameend="c2">optional</entry>
									<entry>required</entry>
									<entry namest="c4" nameend="c5">optional</entry>
									<entry>optional</entry>
								</row>
							</tbody>
						</tgroup>
					</table>

					<variablelist>
						<varlistentry>
							<term>Operation</term>
							<listitem>
								<para>This parameter suggests a method that should be invoked in the context of the Property parameter.</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Property</term>
							<listitem>
								<para>This parameter suggests which &vpi; property should be accessed. The first letter of this parameter's value should be lower case, and the <emphasis>vpi</emphasis> prefix&mdash;common to all &vpi; properties&mdash;can be omitted.</para>

								<para>For example, the &vpi; property <emphasis>vpiFullName</emphasis> is considered equivalent to <emphasis>fullName</emphasis> but not equivalent to either <emphasis>FullName</emphasis> or <emphasis>full_name</emphasis>.</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Accessor</term>
							<listitem>
								<para>This parameter suggests which &vpi; function should be used to access the &vpi; property. When this parameter is not specified, the &vpi; utility layer will attempt to <emphasis>guess</emphasis> the value of this parameter (see the source code for the <!--VOLATILE LINK!--><ulink url="../ref/ruby/classes/SWIG/TYPE_p_unsigned_int.src/M000037.html"><code>SWIG::TYPE_p_unsigned_int#method_missing</code></ulink> method for details).</para>

								<table frame='all'>
									<title>Possible accessors and their implications</title>
									<tgroup cols='0'>
										<thead>
											<row>
												<entry>Accessor</entry>
												<entry>Kind of value accessed</entry>
												<entry>&vpi; functions used to access the value</entry>
											</row>
										</thead>
										<tbody>
											<row>
												<entry>d</entry>
												<entry>delay</entry>
												<entry><function>vpi_get_delays</function>, <function>vpi_put_delays</function></entry>
											</row>
											<row>
												<entry>l</entry>
												<entry>logic</entry>
												<entry><function>vpi_get_value</function>, <function>vpi_put_value</function></entry>
											</row>
											<row>
												<entry>i</entry>
												<entry>integer</entry>
												<entry><function>vpi_get</function></entry>
											</row>
											<row>
												<entry>b</entry>
												<entry>boolean</entry>
												<entry><function>vpi_get</function></entry>
											</row>
											<row>
												<entry>s</entry>
												<entry>string</entry>
												<entry><function>vpi_get_str</function></entry>
											</row>
											<row>
												<entry>h</entry>
												<entry>handle</entry>
												<entry><function>vpi_handle</function></entry>
											</row>
										</tbody>
									</tgroup>
								</table>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>Addendum</term>
							<listitem>
								<para>When this parameter is a question mark (<emphasis>?</emphasis>), it suggests that the specified &vpi; property should be queried as a boolean value. This produces the same effect as specifying <emphasis>b</emphasis> for the Accessor parameter.</para>

								<para>When this parameter is an equal sign (<emphasis>=</emphasis>), it suggests that the specified &vpi; property should be written to.</para>
							</listitem>
						</varlistentry>
					</variablelist>

					<example id="ex..handle-property-accessor-naming-format">
						<title>Accessing a &handle.gloss;'s &vpi; properties</title>

						<informaltable frame='all'>
							<tgroup cols='6'>
								<colspec colname='c1'/>
								<colspec colname='c2'/>
								<colspec colname='c3'/>
								<colspec colname='c4'/>
								<colspec colname='c5'/>
								<colspec colname='c6'/>
								<colspec colname='c7'/>
								<colspec colname='c8'/>
								<thead>
									<row>
										<entry morerows="1">Ruby expression</entry>
										<entry namest="c2" nameend="c7">Naming format</entry>
										<entry morerows="1">Description</entry>
									</row>
									<row>
										<entry namest="c2">Operation</entry>
										<entry>_</entry>
										<entry>Property</entry>
										<entry>_</entry>
										<entry>Accessor</entry>
										<entry>Addendum</entry>
									</row>
								</thead>
								<tbody>
									<row>
										<entry><code>handle.each_vpiNet {|net| puts net.fullName}</code></entry>
										<entry>each</entry>
										<entry>_</entry>
										<entry>vpiNet</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
										<entry morerows="1">These expressions print the full name of each <code>vpiNet</code> object associated with the handle.</entry>
									</row>
									<row>
										<entry><code>handle.each_net {|net| puts net.fullName}</code></entry>
										<entry>each</entry>
										<entry>_</entry>
										<entry>net</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
									</row>

									<row>
										<entry><code>handle.vpiIntVal</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiIntVal</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
										<entry morerows="3">These expressions access the logic value of the handle's <code>vpiIntVal</code> property.</entry>
									</row>
									<row>
										<entry><code>handle.vpiIntVal_l</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiIntVal</entry>
										<entry>_</entry>
										<entry>l</entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.intVal</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>intVal</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.intVal_l</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>intVal</entry>
										<entry>_</entry>
										<entry>l</entry>
										<entry></entry>
									</row>

									<row>
										<entry><code>handle.vpiIntVal = 15</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiIntVal</entry>
										<entry></entry>
										<entry></entry>
										<entry>=</entry>
										<entry morerows="3">These methods assign the number 15 to the logic value of the handle's <code>vpiIntVal</code> property.</entry>
									</row>
									<row>
										<entry><code>handle.vpiIntVal_l = 15</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiIntVal</entry>
										<entry>_</entry>
										<entry>l</entry>
										<entry>=</entry>
									</row>
									<row>
										<entry><code>handle.intVal = 15</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>intVal</entry>
										<entry></entry>
										<entry></entry>
										<entry>=</entry>
									</row>
									<row>
										<entry><code>handle.intVal_l = 15</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>intVal</entry>
										<entry>_</entry>
										<entry>l</entry>
										<entry>=</entry>
									</row>

									<row>
										<entry><code>handle.vpiType</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiType</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
										<entry morerows="3">These expressions access the integer value of the handle's <code>vpiType</code> property.</entry>
									</row>
									<row>
										<entry><code>handle.vpiType_i</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiType</entry>
										<entry>_</entry>
										<entry>i</entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.type</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>type</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.type_i</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>type</entry>
										<entry>_</entry>
										<entry>i</entry>
										<entry></entry>
									</row>

									<row>
										<entry><code>handle.vpiProtected</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiProtected</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
										<entry morerows="5">These expressions access the boolean value of the handle's <code>vpiProtected</code> property.</entry>
									</row>
									<row>
										<entry><code>handle.vpiProtected_b</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiProtected</entry>
										<entry>_</entry>
										<entry>b</entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.vpiProtected?</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiProtected</entry>
										<entry></entry>
										<entry></entry>
										<entry>?</entry>
									</row>
									<row>
										<entry><code>handle.protected</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>protected</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.protected_b</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>protected</entry>
										<entry>_</entry>
										<entry>b</entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.protected?</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>protected</entry>
										<entry></entry>
										<entry></entry>
										<entry>?</entry>
									</row>

									<row>
										<entry><code>handle.vpiFullName</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiFullName</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
										<entry morerows="3">These methods access the string value of the handle's <code>vpiFullName</code> property.</entry>
									</row>
									<row>
										<entry><code>handle.vpiFullName_s</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiFullName</entry>
										<entry>_</entry>
										<entry>s</entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.fullName</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>fullName</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.fullName_s</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>fullName</entry>
										<entry>_</entry>
										<entry>s</entry>
										<entry></entry>
									</row>

									<row>
										<entry><code>handle.vpiParent</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiParent</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
										<entry morerows="3">These methods access the handle value of the handle's <code>vpiParent</code> property.</entry>
									</row>
									<row>
										<entry><code>handle.vpiParent_h</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>vpiParent</entry>
										<entry>_</entry>
										<entry>h</entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.parent</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>parent</entry>
										<entry></entry>
										<entry></entry>
										<entry></entry>
									</row>
									<row>
										<entry><code>handle.parent_h</code></entry>
										<entry></entry>
										<entry></entry>
										<entry>parent</entry>
										<entry>_</entry>
										<entry>h</entry>
										<entry></entry>
									</row>

								</tbody>
							</tgroup>
						</informaltable>
					</example>
				</section>
			</section>
		</section>

		<section id="background.running-tests">
			<title>Running a test</title>

			<para>Unlike an engineer who can verify an electronic component in real-time, the &v; simulator and the Ruby interpreter (see <xref linkend="fig..organization.detail"/>) take turns working with objects in a simulation when a &test.gloss; is run. In particular, they take turns manipulating the &design.gloss; and transfer control to each other when appropriate.</para>

			<para>The situation is similar to a pair of friends playing catch. One friend throws a ball to the other, and the other throws it back. Either is able to inspect and modify the ball, but only when it is in hand.</para>

			<section id="background.running-tests.init">
				<title>Initialization</title>

				<para>A &test.gloss; is first initialized before it is <link linkend="background.running-tests.exec">executed</link>. <xref linkend="fig..ruby_init"/> illustrates the initialization process <link linkend="proc..ruby_init">described below</link>.</para>

				<figure id="fig..ruby_init">
					<title>Initialization of a test</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/ruby_init.png"/>
						</imageobject>
					</mediaobject>
				</figure>

				<procedure id="proc..ruby_init">
					<title>Initialization of a test</title>

					<step>
						<para>The &v; simulator initializes the Ruby interpreter by invoking the <code>$ruby_init();</code> system task/function, whose parameters represent the command-line invocation of the Ruby interpreter. For example, one would specify <code>$ruby_init("ruby", "-w");</code> in &v; to achieve the same effect as specifying <code>ruby -w</code> at a command-prompt.</para>
					</step>

					<step>
						<para>The &v; simulator is paused and the Ruby interpreter is initialized with the arguments of the <code>$ruby_init();</code> system task/function.</para>
					</step>

					<step>&background.step3;</step>
				</procedure>
			</section>

			<section id="background.running-tests.exec">
				<title>Execution</title>

				<para>After a test is <link linkend="background.running-tests.init">initialized</link>, it is executed such that the &design.gloss; is verified against the &specification.gloss;. <xref linkend="fig..ruby_relay"/> illustrates the execution process <link linkend="proc..ruby_relay">described below</link>.</para>

				<figure id="fig..ruby_relay">
					<title>Execution of a test</title>
					<mediaobject>
						<imageobject>
							<imagedata fileref="figures/ruby_relay.png"/>
						</imageobject>
					</mediaobject>
				</figure>

				<procedure id="proc..ruby_relay">
					<title>Execution of a test</title>

					<step>
						<para>The &v; simulator transfers control to the Ruby interpreter by invoking the <code>$ruby_relay();</code> system task/function.</para>
					</step>

					<step>
						<para>The &v; simulator is paused and the Ruby interpreter is given control.</para>
					</step>

					<step>&background.step3;</step>
				</procedure>
			</section>
		</section>
	</chapter>

	<chapter id="usage">
		<title>Usage</title>

		<procedure>
			<title>Typical way of using &rv;</title>

			<step>
				<para>Declare a &v; module (the &design.gloss;) using &v; 2001 syntax, or work with an existing one.</para>
			</step>

			<step>
				<para>Generate a &test.gloss; for your &design.gloss; using the <link linkend="usage.tools.generate-test">automated test generator tool</link>.</para>
			</step>

			<step>
				<para>Specify your expectations in the generated &specification.gloss;.</para>
			</step>

			<step>
				<para>Run the &test.gloss; to verify your &design.gloss;.</para>
			</step>
		</procedure>

		<section id="usage.requirements">
			<title>Requirements</title>
			<para>The following software is necessary in order to use &rv;. Once you have obtained them, proceed to <xref linkend="usage.requirements.install"/>.</para>

			<variablelist>
				<varlistentry>
					<term>&v; simulator</term>
					<listitem>
						<para>&rv; is known to work with the following simulators. Nevertheless, you should be able to use &rv; with any &v; simulator that supports &vpi;.</para>

						<variablelist>
							<varlistentry>
								<term><ulink url="http://www.icarus.com/eda/&v;/">Icarus &v;</ulink></term>
								<listitem>
									<para>Version 0.8 or newer is acceptable.</para>
								</listitem>
							</varlistentry>

							<varlistentry>
								<term><ulink url="http://www.pragmatic-c.com/gpl-cVer/">GPL CVer</ulink></term>
								<listitem>
									<para>Version 2.11a is not yet acceptable.</para>
								</listitem>
							</varlistentry>

							<varlistentry>
								<term><ulink url="http://www.synopsys.com/products/simulation/simulation.html">Synopsys VCS</ulink></term>
								<listitem>
									<para>Version X-2005.06 or newer is acceptable.</para>
								</listitem>
							</varlistentry>

							<varlistentry>
								<term><ulink url="http://www.model.com">Mentor Modelsim</ulink></term>
								<listitem>
									<para>Version 6.1b or newer is acceptable.</para>
								</listitem>
							</varlistentry>
						</variablelist>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><command>make</command></term>
					<listitem>
						<para><ulink url="http://www.gnu.org/software/make/">&gnu; make</ulink> is preferred but any distribution of <command>make</command> should be acceptable.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term>C compiler</term>
					<listitem>
						<para><ulink url="http://www.gnu.org/software/gcc/">&gnu; Compiler Collection (<acronym>GCC</acronym>)</ulink> is preferred but any C compiler should be acceptable.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><ulink url="http://en.wikipedia.org/wiki/Pthreads"><acronym>POSIX</acronym> threads (pthreads)</ulink></term>
					<listitem>
						<para>Header and linkable object files, and operating system support for this library are necessary.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><ulink url="http://www.ruby-lang.org">Ruby</ulink></term>
					<listitem>
						<para>Version 1.8 or newer, including header and linkable object files for building extensions, is necessary.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><ulink url="http://rubyforge.org/frs/?group_id=126">RubyGems</ulink></term>
					<listitem>
						<para>Any recent version should be acceptable.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><ulink url="http://rubyforge.org/frs/?group_id=50">&rake;</ulink></term>
					<listitem>
						<para>Version 0.7.0 or newer is necessary.</para>
					</listitem>
				</varlistentry>

				<varlistentry>
					<term><ulink url="http://rubyforge.org/frs/?group_id=797">&rspec;</ulink></term>
					<listitem>
						<para>Version 0.5.4 or newer is necessary.</para>
					</listitem>
				</varlistentry>
			</variablelist>

			<procedure id="usage.requirements.install">
				<title>Installing the required software</title>

				<step><para>Install Ruby.</para></step>
				<step><para>Install RubyGems.</para></step>
				<step><para>Install &rake.gloss; and &rspec.gloss; by issuing the command <command>gem <action>install</action> <option>--remote</option> <replaceable>rake</replaceable> <replaceable>rspec</replaceable></command> at your command-prompt.</para></step>
				<step><para>Build &rv; by the command <command>rake <action>build</action></command> inside the directory in which you extracted the release package.</para></step>
			</procedure>
		</section>

		<section id="usage.tools">
			<title>Tools</title>
			<para>The <filename>tools</filename> directory contains tools which ease the process of writing &test.gloss;s. Each tool provides help and usage information invoked with the <option>--help</option> option at a command-prompt.</para>

			<section id="usage.tools.generate-test">
				<title>Automated test generation</title>

				<para>The <filename>tools/generate_test.rb</filename> tool can be used to automatically generate &test.gloss;s from &v; 2001 module declarations. You can try it by invoking <command>ruby <replaceable>tools/generate_test.rb</replaceable> <option>--help</option></command> at your command-prompt.</para>
			</section>
		</section>

		<section id="usage.examples">
			<title>Examples</title>
			<para>The <filename>examples</filename> directory contains several example &test.gloss;s which illustrate how &rv; can be used. Each example has an associated <filename>Rakefile</filename> which simplifies the process of running it. Therefore, simply navigate into an example directory and run the command <command>rake</command> to get started.</para>

			<para>Also, some example &specification.gloss;s make use of &BDD.gloss; through the &rspec.gloss; library. See the <xref linkend="background.methodology"/> for a discussion of &rspec.gloss;.</para>
		</section>
	</chapter>

	<chapter id="problems">
		<title>Known problems</title>

		<para>This chapter presents known problems and possible solutions.</para>

		<section id="problems.ruby">
			<title>Ruby</title>

			<section id="problems.ruby.SystemStackError">
				<title>SystemStackError</title>

				&fixed-0.2;

				<para>If a <quote>stack level too deep (SystemStackError)</quote> error occurs during the simulation, then increase the system-resource limit for stack-size by running the command <command>ulimit <option>-s</option> <replaceable>unlimited</replaceable></command> before starting the simulation.</para>
			</section>

			<section id="problems.ruby.TestUnit">
				<title>test/unit</title>

				&fixed-0.2;

				<para>If your &specification.gloss; employs Ruby's unit testing framework, then you will encounter the error: <quote>[BUG] cross-thread violation on rb_gc()</quote>.</para>
			</section>
		</section>

		<section id="problem.ivl">
			<title>Icarus &v;</title>

			<section id="problems.ivl.vpi_handle_by_name">
				<title>vpi_handle_by_name</title>

				<section id="problems.ivl.vpi_handle_by_name.absolute-paths">
					<title>Give full paths to &v; objects</title>

					<para>In version 0.8, the <function>vpi_handle_by_name</function> function requires an <emphasis>absolute</emphasis> path (including the name of the &bench.gloss; which instantiates the &design.gloss;) to a &v; object.</para>

					<para>For example, consider <xref linkend="ex..TestFoo"/>. Here, one needs to specify <literal>TestFoo.my_foo.clk</literal> instead of <literal>my_foo.clk</literal> in order to access the <varname>clk</varname> input of the <varname>my_foo</varname> module instance.</para>

					<example id="ex..TestFoo">
						<title>Part of a bench which instantiates a &v; design</title>
<programlisting>
module TestFoo;
	reg clk_reg;
	Foo my_foo(.clk(clk_reg));
endmodule;
</programlisting>
					</example>
				</section>

				<section id="problems.ivl.vpi_handle_by_name.connect-registers">
					<title>Registers must be connected</title>

					<para>In version 0.8, if you want to access a register in a &design.gloss;, then it must be connected to something (either assigned to a wire or passed as a parameter to a module instantiation). Otherwise, Icarus will give you a <literal>nil</literal> value as the result of <function>vpi_handle_by_name</function> method.</para>

					<para>For example, suppose you wanted to access the <varname>clk_reg</varname> register, from the &bench.gloss; shown in <xref linkend="ex..TestFoo_bad"/>. If you execute the statement <code>clk_reg = vpi_handle_by_name("TestFoo.clk_reg", nil)</code> in a &specification.gloss;, then you will discover that the <function>vpi_handle_by_name</function> method returns <literal>nil</literal> instead of a handle to the <varname>clk_reg</varname> register.</para>

					<para>The solution is to change the &design.gloss; such that it appears like the one shown in <xref linkend="ex..TestFoo_fix"/> where the register is connected to a wire, or <xref linkend="ex..TestFoo"/> where the register is connected to a module instantiation.</para>

					<example id="ex..TestFoo_bad">
						<title>Bad design with unconnected registers</title>

						<para>Here the <varname>clk_reg</varname> register is not connected to anything.</para>

<programlisting>
module TestFoo;
	reg clk_reg;
endmodule;
</programlisting>
					</example>

					<example id="ex..TestFoo_fix">
						<title>Fixed design with wired registers</title>

						<para>Here the <varname>clk_reg</varname> register is connected to the <varname>clk_wire</varname> wire.</para>

<programlisting>
module TestFoo;
	reg clk_reg;
	wire clk_wire;
	assign clk_wire = clk_reg;
endmodule;
</programlisting>
					</example>
				</section>
			</section>

			<section id="problems.ivl.vpi_reset">
				<title>Vpi::reset</title>

				<note>
					<para>This method was removed in release 0.3 of &rv;, and is deprecated. Please use <code>Vpi::vpi_control(VpiReset)</code> instead.</para>
				</note>

				<para>In version 0.8, the <code>vpi_control(vpiReset)</code> &vpi; function causes an assertion to fail inside the simulator. As a result, the simulation terminates and a core dump is produced.</para>
			</section>
		</section>

		<section id="problems.vsim">
			<title>Mentor Modelsim</title>

			<section id="problems.vsim.ruby_run">
				<title>ruby_run()</title>

				&fixed-0.2;

				<para>Version 6.1b doesn't play nicely with either an embedded Ruby interpreter or POSIX threads in a PLI application. When &rv; invokes the <function>ruby_run</function> function (which starts the Ruby interpreter), the simulator terminates immediately with an exit status of 0.</para>
			</section>
		</section>
	</chapter>

	<glossary id="glossary">
		<glossdiv>
			<title>B</title>

			<glossentry id="term..bench">
				<glossterm>Bench</glossterm>
				<glossdef>
					<para>An environment in which a &design.gloss; is verified against a &specification.gloss;. Often, it is used to emulate conditions in which the &design.gloss; will be eventually deployed.</para>
				</glossdef>
			</glossentry>

			<glossentry id="term..BDD">
				<glossterm><acronym>BDD</acronym></glossterm>

				<glossdef>
					<para>Behavior driven development.</para>
					<para>A software development methodology which emphasizes thinking in terms of behavior when designing, implementing, and verifying software. See the <ulink url="http://behaviour-driven.org/">official wiki</ulink> for more information.</para>

					<glossseealso otherterm="term..rspec"/>
				</glossdef>
			</glossentry>
		</glossdiv>

		<glossdiv>
			<title>D</title>

			<glossentry id="term..design">
				<glossterm>Design</glossterm>
				<glossdef>
					<para>An idea or entity that is verified against a &specification.gloss; in order to ensure correctness or soundness of its being.</para>
				</glossdef>
			</glossentry>
		</glossdiv>

		<glossdiv>
			<title>H</title>

			<glossentry id="term..handle">
				<glossterm>Handle</glossterm>
				<glossdef>
					<para>An object in a &v; simulation.</para>
				</glossdef>
			</glossentry>
		</glossdiv>

		<glossdiv>
			<title>R</title>

			<glossentry id="term..rake">
				<glossterm>&rake;</glossterm>
				<glossdef>
					<blockquote>
						<attribution><ulink url="&rake-doc.url;">&rake; documentation</ulink></attribution>
						<para>Rake is a build tool, written in Ruby, using Ruby as a build language. Rake is similar to make in scope and purpose.</para>
					</blockquote>

					<para>See the <ulink url="&rake.url;">&rake; website</ulink> for more information.</para>
				</glossdef>
			</glossentry>

			<glossentry id="term..rspec">
				<glossterm>&rspec;</glossterm>
				<glossdef>
					<para>Ruby framework for &BDD.gloss;. See the <ulink url="&rspec.url;">&rspec; website</ulink> and &rspec-tutorial..ulink; for more information.</para>

					<glossseealso otherterm="term..BDD"/>
				</glossdef>
			</glossentry>
		</glossdiv>

		<glossdiv>
			<title>S</title>

			<glossentry id="term..specification">
				<glossterm>Specification</glossterm>
				<glossdef>
					<para>A collection of expectations that must be satisfied by a &design.gloss; when subjected to certain conditions.</para>
				</glossdef>
			</glossentry>
		</glossdiv>

		<glossdiv>
			<title>T</title>

			<glossentry id="term..test">
				<glossterm>Test</glossterm>
				<glossdef>
					<para>The act of verifying a &design.gloss; against a &specification.gloss; in a &bench.gloss;.</para>
					<glossseealso otherterm="term..test-bench"/>
				</glossdef>
			</glossentry>

			<glossentry id="term..test-bench">
				<glossterm>Test bench</glossterm>
				<glossdef>
					<para>An allusion to <link linkend="background.terminology">a bench in an electronics laboratory</link>, or so it seems.</para>
					<glossseealso otherterm="term..test"/>
				</glossdef>
			</glossentry>
		</glossdiv>
	</glossary>

	&license;
</book>
