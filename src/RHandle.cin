/*
	Copyright 2006 Suraj Kurapati

	This file is part of Ruby-VPI.

	Ruby-VPI is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

	Ruby-VPI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

	You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/

#ifndef RHANDLE_CIN
#define RHANDLE_CIN

	#include <ruby.h>
	#include "common.h"
	#include "verilog.h"
	#include "RHandle.hin"


	void Init_RHandle() {
		RHandle__rClassDef = rb_define_class_under(RVPI__rModuleDef, "Handle", rb_cObject);
		rb_define_alloc_func(RHandle__rClassDef, RHandle_rb_alloc);
		rb_define_method(RHandle__rClassDef, "initialize", RHandle_rb_init, 0);
		rb_define_method(RHandle__rClassDef, "==", RHandle_rb_equal2, 1);
		rb_define_method(RHandle__rClassDef, "value", RHandle_rb_get_value, 0);
		rb_define_method(RHandle__rClassDef, "value=", RHandle_rb_put_value, 1);
	}

	static VALUE RHandle_rb_alloc(VALUE arKlass) {
		vpiHandle* pvHandle = ALLOC(vpiHandle);
		return Data_Wrap_Struct(arKlass, NULL, free, pvHandle);
	}

	static VALUE RHandle_rb_init(VALUE arSelf) {
		RHandle_set(arSelf, NULL);
		return arSelf;
	}

	static VALUE RHandle_rb_equal2(VALUE arSelf, VALUE arOther) {
		vpiHandle* pvSelf = RHandle_get(arSelf);
		vpiHandle* pvOther = RHandle_get(arSelf);

		return (*pvSelf == *pvOther) ? Qtrue : Qfalse;
	}

	static VALUE RHandle_rb_get_value(VALUE arSelf) {
		vpiHandle* pvSelf = RHandle_get(arSelf);

		if(*pvSelf == NULL) {
			return Qnil;
		}
		else {
			s_vpi_value val;
			val.format = vpiIntVal;
			vpi_get_value(*pvSelf, &val);

			common_debug("vpi_get_value(%p) => %d", *pvSelf, val.value.integer);

			return LONG2NUM(val.value.integer);
		}
	}

	static VALUE RHandle_rb_put_value(VALUE arSelf, VALUE arValue) {
		vpiHandle* pvSelf = RHandle_get(arSelf);

		if(*pvSelf == NULL) {
			rb_raise(rb_eRuntimeError, "Handle is nil");
		}
		else {
			s_vpi_value val;
			val.format = vpiIntVal;
			val.value.integer = NUM2LONG(arValue);

			common_debug("vpi_put_value(%p) <= %d", *pvSelf, val.value.integer);

			vpi_put_value(*pvSelf, &val, NULL, vpiNoDelay);
		}

		return arSelf;
	}

	static vpiHandle* RHandle_get(VALUE arHandle) {
		RHandle_ensureType(arHandle);

		vpiHandle* pvHandle;
		Data_Get_Struct(arHandle, vpiHandle, pvHandle);

		return pvHandle;
	}

	static inline void RHandle_set(VALUE arHandle, vpiHandle avHandle) {
		*RHandle_get(arHandle) = avHandle;
	}

	static inline int RHandle_testType(VALUE arHandle) {
		return (
			TYPE(arHandle) == T_DATA
			&& RDATA(arHandle)->dfree == (RUBY_DATA_FUNC)free
		);
	}

	static void RHandle_ensureType(VALUE arHandle) {
		if(!RHandle_testType(arHandle)) {
			rb_raise(rb_eTypeError, "object is not a Handle");
		}
	}

#endif
