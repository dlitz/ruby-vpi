/*
	Copyright 2006 Suraj Kurapati

	This file is part of Ruby-VPI.

	Ruby-VPI is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

	Ruby-VPI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

	You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
/**\file
	Ruby class for the vpiHandle VPI object.
*/

#ifndef HANDLE_HIN
#define HANDLE_HIN

	#include <ruby.h>
	#include "verilog.h"


	/**
		Ruby definition for this class.
	*/
	static VALUE RHandle__rClassDef;

	/**
		Defines and registers this class with Ruby.
		@note	RHandle__rClassDef is invalid before this function is called.
	*/
	void Init_RHandle();

	/**
		Allocates memory for an instance of this class.
	*/
	static VALUE RHandle_rb_alloc(VALUE arKlass);

	/**
		Initializes a newly instantiated object of this class.
	*/
	static VALUE RHandle_rb_init(VALUE arSelf);

	/**
		Double equals (==) test for equality.
	*/
	static VALUE RHandle_rb_equal2(VALUE arSelf, VALUE arOther);

	/**
		Returns the value associated with this Handle.
		@note	Only vpiIntVal is implemented as the moment.
		@see	vpi_get_value
	*/
	static VALUE RHandle_rb_get_value(VALUE arSelf);

	/**
		Sets the value associated with this Handle.
		@note	Only vpiIntVal is implemented as the moment.
		@see	vpi_put_value
	*/
	static VALUE RHandle_rb_put_value(VALUE arSelf, VALUE arValue);

	/**
		Returns a pointer to this class' VPI object.
	*/
	static vpiHandle* RHandle_get(VALUE arHandle);

	/**
		Sets this class' VPI object.
	*/
	static inline void RHandle_set(VALUE arHandle, vpiHandle avHandle);

	/**
		Returns a non-zero value if the given Ruby object is a Handle.
	*/
	static inline int RHandle_testType(VALUE arHandle);

	/**
		Raises a TypeError if the given Ruby object is not a Handle.
	*/
	static void RHandle_ensureType(VALUE arHandle);

#endif
