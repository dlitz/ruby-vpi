/*
	Copyright 2006 Suraj Kurapati
	Copyright 1999 Kazuhiro HIWADA

  This file is part of Ruby-VPI.

	Ruby-VPI is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

	Ruby-VPI is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

	You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
/**\file
	Ruby module for interfacing with VPI.
*/

#ifndef VPI_HIN
#define VPI_HIN

	#include <ruby.h>

	/**
		Identifier for this module.
	*/
	static VALUE RVPI__rModuleDef;

	/**
		Creates and registers the VPI module with Ruby, so that Ruby code can use it.
	*/
	void Init_RVPI();

	/**
		Transfers control from Ruby code to Verilog code.
	*/
	static VALUE RVPI_rb_relay_verilog(VALUE arSelf);

	/**
		Returns the handle associated with the given hierarchical name.

		@param	name	The hierarchical name of the VPI object whose handle you wish to obtain.

		@param	parent	The parent handle to which the given hierarchical name is relative.

		@see vpi_handle_by_name
	*/
	static VALUE RVPI_rb_handle_by_name(int aNumArgs, VALUE* aprArgs, VALUE arSelf);

	/**
		@see vpi_control
	*/
	// static VALUE RVPI_rb_control(VALUE arSelf);

	/**
		Stops the simulation; same as $stop in Verilog.

		@param	diagnostic_value	(Optional) Same as the parameter for $stop.

		@see vpi_control
	*/
	static VALUE RVPI_rb_stop(int aNumArgs, VALUE* aprArgs, VALUE arSelf);

	/**
		Finishes the simulation; same as $finish in Verilog.

		@param	diagnostic_value	(Optional) Same as the parameter for $finish.

		@see vpi_control
	*/
	static VALUE RVPI_rb_finish(int aNumArgs, VALUE* aprArgs, VALUE arSelf);

	/**
		Resets the simulation; same as $reset in Verilog.

		@param	stop_value	(Optional) Same as the parameter for $reset.
		@param	reset_value	(Optional) Same as the parameter for $reset.
		@param	diagnostic_value	(Optional) Same as the parameter for $reset.

		@see vpi_control
	*/
	static VALUE RVPI_rb_reset(int aNumArgs, VALUE* aprArgs, VALUE arSelf);

#endif
